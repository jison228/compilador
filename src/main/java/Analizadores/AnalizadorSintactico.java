
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import SymbolTable.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Queue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\004\012\000\002\005\003\000\002\005\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\003" +
    "\000\002\017\010\000\002\017\012\000\002\015\005\000" +
    "\002\015\005\000\002\015\006\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\020\010" +
    "\000\002\021\004\000\002\022\004\000\002\023\011\000" +
    "\002\023\014\000\002\024\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\022\007\006\011\005\012\023\013\022\014" +
    "\026\020\024\023\004\052\020\001\002\000\004\046\155" +
    "\001\002\000\004\046\150\001\002\000\004\046\112\001" +
    "\002\000\034\002\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\052\ufffc\001\002\000\024\002\000\007\006\011\005" +
    "\012\023\013\022\014\026\020\024\023\004\052\020\001" +
    "\002\000\034\002\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\052\ufffd\001\002\000\004\002\111\001\002\000\034" +
    "\002\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\020\ufffe\021\ufffe\023\ufffe\024\ufffe\025\ufffe\052\ufffe" +
    "\001\002\000\034\002\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\052\ufffb\001\002\000\034\002\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\020\ufffa\021\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\052\ufffa\001\002\000\034\002" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\020\ufff9\021\ufff9\023\ufff9\024\ufff9\025\ufff9\052\ufff9\001" +
    "\002\000\034\002\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\052\ufff6\001\002\000\004\042\107\001\002\000\034" +
    "\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\052\ufff7" +
    "\001\002\000\014\004\037\005\032\006\036\046\035\052" +
    "\034\001\002\000\004\050\066\001\002\000\004\052\020" +
    "\001\002\000\034\002\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\052\ufff8\001\002\000\004\052\027\001\002\000" +
    "\034\002\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\052" +
    "\uffd3\001\002\000\004\022\031\001\002\000\014\004\037" +
    "\005\032\006\036\046\035\052\034\001\002\000\072\002" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\001\002\000\072\002\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\043\uffe7\047\uffe7\050\uffe7\052\uffe7\001\002" +
    "\000\072\002\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\043\uffe2" +
    "\047\uffe2\050\uffe2\052\uffe2\001\002\000\014\004\037\005" +
    "\032\006\036\046\035\052\034\001\002\000\072\002\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\040\uffe4\041\uffe4\043\uffe4\047\uffe4\050\uffe4" +
    "\052\uffe4\001\002\000\072\002\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\047\uffe6\050\uffe6\052\uffe6\001\002\000" +
    "\072\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\047\035\050\036\uffea\040\uffea\041\uffea\043\uffea\047" +
    "\uffea\050\uffea\052\uffea\001\002\000\030\007\006\011\005" +
    "\012\023\013\022\014\026\020\024\023\004\032\042\033" +
    "\045\050\044\052\020\001\002\000\014\004\037\005\032" +
    "\006\036\046\035\052\034\001\002\000\024\007\006\011" +
    "\005\012\023\013\022\014\026\020\024\021\061\023\004" +
    "\052\020\001\002\000\004\004\053\001\002\000\014\004" +
    "\037\005\032\006\036\046\035\052\034\001\002\000\072" +
    "\002\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\047\035\050\036\uffeb\040\uffeb\041\uffeb\043\uffeb\047\uffeb" +
    "\050\uffeb\052\uffeb\001\002\000\014\004\037\005\032\006" +
    "\036\046\035\052\034\001\002\000\014\004\037\005\032" +
    "\006\036\046\035\052\034\001\002\000\072\002\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\040\uffe8\041\uffe8\043\uffe8\047\uffe8\050\uffe8\052" +
    "\uffe8\001\002\000\072\002\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\047\uffe9\050\uffe9\052\uffe9\001\002\000\004" +
    "\051\054\001\002\000\022\007\006\011\005\012\023\013" +
    "\022\014\026\020\024\023\004\052\020\001\002\000\024" +
    "\007\006\011\005\012\023\013\022\014\026\020\024\021" +
    "\057\023\004\052\020\001\002\000\034\002\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\020\uffff\021" +
    "\uffff\023\uffff\024\uffff\025\uffff\052\uffff\001\002\000\004" +
    "\052\060\001\002\000\034\002\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\052\uffd1\001\002\000\004\052\062\001" +
    "\002\000\034\002\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\052\uffd2\001\002\000\072\002\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\047\035\050\036\uffec\040" +
    "\uffec\041\uffec\043\uffec\047\uffec\050\uffec\052\uffec\001\002" +
    "\000\010\032\042\033\045\047\065\001\002\000\072\002" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\040\uffe3\041\uffe3\043\uffe3\047\uffe3\050" +
    "\uffe3\052\uffe3\001\002\000\004\052\067\001\002\000\006" +
    "\045\uffef\051\uffef\001\002\000\006\045\071\051\072\001" +
    "\002\000\004\052\105\001\002\000\004\044\073\001\002" +
    "\000\004\050\074\001\002\000\010\015\100\016\101\017" +
    "\075\001\002\000\006\045\ufff0\051\ufff0\001\002\000\006" +
    "\045\102\051\103\001\002\000\006\045\ufff4\051\ufff4\001" +
    "\002\000\006\045\ufff2\051\ufff2\001\002\000\006\045\ufff1" +
    "\051\ufff1\001\002\000\010\015\100\016\101\017\075\001" +
    "\002\000\034\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\052\ufff5\001\002\000\006\045\ufff3\051\ufff3\001\002" +
    "\000\006\045\uffee\051\uffee\001\002\000\040\002\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\020\uffd4" +
    "\021\uffd4\023\uffd4\024\uffd4\025\uffd4\032\042\033\045\052" +
    "\uffd4\001\002\000\014\004\037\005\032\006\036\046\035" +
    "\052\034\001\002\000\042\002\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\032\042\033\045\052\uffed\001" +
    "\002\000\004\002\001\001\002\000\016\004\037\005\032" +
    "\006\036\037\113\046\035\052\034\001\002\000\004\046" +
    "\145\001\002\000\010\040\141\041\142\047\uffdc\001\002" +
    "\000\022\026\132\027\127\030\131\031\125\032\042\033" +
    "\045\036\126\043\130\001\002\000\004\047\117\001\002" +
    "\000\022\007\006\011\005\012\023\013\022\014\026\020" +
    "\024\023\004\052\020\001\002\000\026\007\006\010\121" +
    "\011\005\012\023\013\022\014\026\020\024\023\004\024" +
    "\122\052\020\001\002\000\022\007\006\011\005\012\023" +
    "\013\022\014\026\020\024\023\004\052\020\001\002\000" +
    "\034\002\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\052" +
    "\uffe1\001\002\000\024\007\006\011\005\012\023\013\022" +
    "\014\026\020\024\023\004\024\124\052\020\001\002\000" +
    "\034\002\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\052" +
    "\uffe0\001\002\000\014\004\037\005\032\006\036\046\035" +
    "\052\034\001\002\000\014\004\037\005\032\006\036\046" +
    "\035\052\034\001\002\000\014\004\037\005\032\006\036" +
    "\046\035\052\034\001\002\000\014\004\037\005\032\006" +
    "\036\046\035\052\034\001\002\000\014\004\037\005\032" +
    "\006\036\046\035\052\034\001\002\000\014\004\037\005" +
    "\032\006\036\046\035\052\034\001\002\000\014\032\042" +
    "\033\045\040\uffdb\041\uffdb\047\uffdb\001\002\000\014\032" +
    "\042\033\045\040\uffd9\041\uffd9\047\uffd9\001\002\000\014" +
    "\032\042\033\045\040\uffd7\041\uffd7\047\uffd7\001\002\000" +
    "\014\032\042\033\045\040\uffda\041\uffda\047\uffda\001\002" +
    "\000\014\032\042\033\045\040\uffd6\041\uffd6\047\uffd6\001" +
    "\002\000\014\032\042\033\045\040\uffd8\041\uffd8\047\uffd8" +
    "\001\002\000\014\004\037\005\032\006\036\046\035\052" +
    "\034\001\002\000\014\004\037\005\032\006\036\046\035" +
    "\052\034\001\002\000\004\047\uffde\001\002\000\004\047" +
    "\uffdf\001\002\000\014\004\037\005\032\006\036\046\035" +
    "\052\034\001\002\000\004\047\147\001\002\000\004\047" +
    "\uffdd\001\002\000\016\004\037\005\032\006\036\037\113" +
    "\046\035\052\034\001\002\000\004\047\152\001\002\000" +
    "\022\007\006\011\005\012\023\013\022\014\026\020\024" +
    "\023\004\052\020\001\002\000\024\007\006\011\005\012" +
    "\023\013\022\014\026\020\024\023\004\025\154\052\020" +
    "\001\002\000\034\002\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\052\uffd5\001\002\000\004\050\156\001\002\000" +
    "\004\052\067\001\002\000\006\045\071\051\160\001\002" +
    "\000\004\047\161\001\002\000\034\002\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\052\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\030\002\011\003\007\004\010\010\012\011" +
    "\006\017\013\020\014\021\015\022\024\023\020\024\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\010\010\055\011\006" +
    "\017\013\020\014\021\015\022\024\023\020\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\105\013\037\014\032\001\001\000\002\001\001\000" +
    "\004\011\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\040\013" +
    "\037\014\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\063\013\037\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\042\004\010\010\012\011\006\017\013\020" +
    "\014\021\015\022\024\023\020\024\016\001\001\000\006" +
    "\013\062\014\032\001\001\000\024\004\010\010\055\011" +
    "\006\017\013\020\014\021\015\022\024\023\020\024\016" +
    "\001\001\000\002\001\001\000\006\013\045\014\032\001" +
    "\001\000\002\001\001\000\004\014\051\001\001\000\004" +
    "\014\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\054\004\010\010\012\011\006" +
    "\017\013\020\014\021\015\022\024\023\020\024\016\001" +
    "\001\000\024\004\010\010\055\011\006\017\013\020\014" +
    "\021\015\022\024\023\020\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\075\006\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\107\013\037\014\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\114\013\037\014" +
    "\032\015\115\016\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\117\004\010\010\012\011\006\017\013\020\014\021\015" +
    "\022\024\023\020\024\016\001\001\000\024\004\010\010" +
    "\055\011\006\017\013\020\014\021\015\022\024\023\020" +
    "\024\016\001\001\000\026\003\122\004\010\010\012\011" +
    "\006\017\013\020\014\021\015\022\024\023\020\024\016" +
    "\001\001\000\002\001\001\000\024\004\010\010\055\011" +
    "\006\017\013\020\014\021\015\022\024\023\020\024\016" +
    "\001\001\000\002\001\001\000\010\012\137\013\037\014" +
    "\032\001\001\000\010\012\136\013\037\014\032\001\001" +
    "\000\010\012\135\013\037\014\032\001\001\000\010\012" +
    "\134\013\037\014\032\001\001\000\010\012\133\013\037" +
    "\014\032\001\001\000\010\012\132\013\037\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\114\013\037\014\032\016\143\001\001\000\012" +
    "\012\114\013\037\014\032\016\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\114\013\037\014\032" +
    "\016\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\114\013\037\014\032\015\150\016\113\001\001" +
    "\000\002\001\001\000\026\003\152\004\010\010\012\011" +
    "\006\017\013\020\014\021\015\022\024\023\020\024\016" +
    "\001\001\000\024\004\010\010\055\011\006\017\013\020" +
    "\014\021\015\022\024\023\020\024\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error -> " + cur_token.value.toString() + " <- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse ->" + cur_token.value.toString() + "<- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_fatal_error(errMsg, null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {


     public SymbolTable tablaDeSimbolos = new SymbolTable();
     public ArrayList<String> identifierList = new ArrayList();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.save();
                         System.out.println("Compilacion exitosa.");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa sentencia 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= sentencia 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> declaracion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= asignacion 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> asignacion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= if 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> if");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= while 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> while");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= display 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> display");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= get 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> get");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= for 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> for");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= long 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> long");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= DIM CORCHETE_OPEN identificadores CORCHETE_CLOSE OP_TIPO CORCHETE_OPEN tiposdedato CORCHETE_CLOSE 
            {
              Symbol RESULT =null;
		 
                         System.out.println("declaracion -> DIM declaracion ");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tiposdedato ::= tipodedato 
            {
              Symbol RESULT =null;
		
                         System.out.println("tiposdedato -> Tipo de dato simple ");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tiposdedato",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tiposdedato ::= tiposdedato COMA tipodedato 
            {
              Symbol RESULT =null;
		
                         System.out.println("tiposdedato -> Tipo de dato en lista ");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tiposdedato",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipodedato ::= INTEGER_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "INTEGER");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= FLOAT_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "FLOAT");                       
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= STRING_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "STRING");                         
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identificadores ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         this.identifierList.add(ID);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificadores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         this.identifierList.add(ID);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificadores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= IDENTIFICADOR OP_ASIG expresion 
            {
              Symbol RESULT =null;
		
                         System.out.println("asignacion -> IDENTIFICADOR OP_ASIG expresion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion OP_PLUS termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion OP_MINUS termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= termino OP_MULTI factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= termino OP_DIVISION factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= CONSTANTE_ENTERA 
            {
              Symbol RESULT =null;
		int CTE_ENTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_ENTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_ENT = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         tablaDeSimbolos.add("_"+CTE_ENT, null, CTE_ENT, null);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= CONSTANTE_FLOAT 
            {
              Symbol RESULT =null;
		int CTE_FLOATleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_FLOATright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_FLOAT = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         tablaDeSimbolos.add("_"+CTE_FLOAT, null, CTE_FLOAT, null);                         
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= CONSTANTE_STRING 
            {
              Symbol RESULT =null;
		int CTE_STRINGleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_STRINGright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_STRING = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         String str = CTE_STRING.replace("\"", "");
                         tablaDeSimbolos.add("_"+str, null, str, str.length());
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= PAREN_OPEN expresion PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF PAREN_OPEN condicion PAREN_CLOSE programa ENDIF 
            {
              Symbol RESULT =null;
		
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE programa ENDIF");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF PAREN_OPEN condicion PAREN_CLOSE programa ELSE programa ENDIF 
            {
              Symbol RESULT =null;
		
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE programa ELSE programa ENDIF");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= comparacion OP_AND comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= comparacion OP_OR comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= OP_NOT PAREN_OPEN comparacion PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion OP_GT expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion OP_LT expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= expresion OP_GTE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= expresion OP_LTE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= expresion OP_EQ expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= expresion OP_NE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while ::= WHILE PAREN_OPEN condicion PAREN_CLOSE programa ENDWHILE 
            {
              Symbol RESULT =null;
		
                         System.out.println("while -> WHILE PAREN_OPEN condicion PAREN_CLOSE programa ENDWHILE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // display ::= DISPLAY expresion 
            {
              Symbol RESULT =null;
		
                         System.out.println("display -> display expresion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("display",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // get ::= GET IDENTIFICADOR 
            {
              Symbol RESULT =null;
		
                         System.out.println("get -> get IDENTIFICADOR");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("get",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for ::= FOR asignacion TO expresion programa NEXT IDENTIFICADOR 
            {
              Symbol RESULT =null;
		
                         System.out.println("for -> for asignacion TO expresion programa NEXT identificador");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for ::= FOR asignacion TO expresion CORCHETE_OPEN CONSTANTE_ENTERA CORCHETE_CLOSE programa NEXT IDENTIFICADOR 
            {
              Symbol RESULT =null;
		
                         System.out.println("for -> FOR asignacion TO expresion CORCHETE_OPEN CONSTANTE_ENTERA CORCHETE_CLOSE programa NEXT identificador");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // long ::= LONG PAREN_OPEN CORCHETE_OPEN identificadores CORCHETE_CLOSE PAREN_CLOSE 
            {
              Symbol RESULT =null;
		
                         System.out.println("long -> LONG PAREN_OPEN CORCHETE_OPEN identificadores CORCHETE_CLOSE PAREN_CLOSE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("long",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
